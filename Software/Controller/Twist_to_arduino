#include <WiFi.h> // Use WiFi.h for ESP32
#include <PubSubClient.h>
#include <ArduinoJson.h>        // For parsing JSON input

// WiFi settings
char ssid[] = "";  // Network SSID
char pass[] = "";  // WPA key

// MQTT Broker settings
const char *mqtt_broker = "broker.emqx.io"; // EMQX broker endpoint
const char *mqtt_topic = "robot/velocity"; // MQTT topic
const char *mqtt_username = "emqx"; // MQTT username for authentication
const char *mqtt_password = "public"; // MQTT password for authentication
const int mqtt_port = 1883; // MQTT port (TCP)

float throttleValue = 0.0;
float steeringValue = 0.0;
int LEDpwm = 12;


WiFiClient wifiClient;
PubSubClient mqtt_client(wifiClient);

void connectToWiFi();
void connectToMQTTBroker();
void mqttCallback(char *topic, byte *payload, unsigned int length);
void processTwistMessage(const char *payload);





void setup() {
    Serial.begin(115200);
    connectToWiFi();
    mqtt_client.setServer(mqtt_broker, mqtt_port);
    mqtt_client.setCallback(mqttCallback);
    connectToMQTTBroker();
    pinMode(2, OUTPUT);
    pinMode(LEDpwm, OUTPUT);
}

void connectToWiFi() {
    Serial.println("Connecting to WiFi");
    WiFi.begin(ssid, pass);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to the WiFi network");
}

void connectToMQTTBroker() {
    while (!mqtt_client.connected()) {
        String client_id = "esp32-client-" + String(WiFi.macAddress()); // Change to esp32-client for clarity
        Serial.print("Connecting to MQTT Broker as ");
        Serial.println(client_id); // Correct usage of Serial.println
        if (mqtt_client.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
            Serial.println("Connected to MQTT broker");
            mqtt_client.subscribe(mqtt_topic);
            // Publish message upon successful connection
           // mqtt_client.publish(mqtt_topic, "publish any message here");
        } else {
            Serial.print("Failed to connect to MQTT broker, rc=");
            Serial.print(mqtt_client.state());
            Serial.println(" try again in 5 seconds");
            delay(5000);
        }
    }
}

void mqttCallback(char *topic, byte *payload, unsigned int length) {
    Serial.print("Message received on topic: ");
    Serial.println(topic);

    // Convert payload (byte array) to a String
    String msg;
    for (unsigned int i = 0; i < length; i++) {
        msg += (char)payload[i];
    }

    Serial.print("Message: ");
    Serial.println(msg);
    Serial.println("-----------------------");

    // Pass the message as a C-string
    processTwistMessage(msg.c_str());
}


void loop() {
    if (!mqtt_client.connected()) {
        connectToMQTTBroker();
    }
    mqtt_client.loop();
    analogWrite(LEDpwm, (255*throttleValue));
    }


// Process the incoming twist message and parse the linear and angular velocities
void processTwistMessage(const char *payload) {
  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, payload);

  if (!error) {
    float linear_x = doc["linear"]["x"];
    float linear_y = doc["linear"]["y"];
    float linear_z = doc["linear"]["z"];
    float angular_x = doc["angular"]["x"];
    float angular_y = doc["angular"]["y"];
    float angular_z = doc["angular"]["z"];

    // For this robot, we care only about the x component of linear and z component of angular velocity
    throttleValue = linear_x;  // Linear velocity (x-axis)
    steeringValue = angular_z; // Angular velocity (z-axis)

    // Print out the velocities to the Serial Monitor
    Serial.print("Throttle (linear x): ");
    Serial.println(throttleValue);
    Serial.print("Steering (angular z): ");
    Serial.println(steeringValue);
  } else {
    Serial.println("Error parsing JSON");
  }
}
